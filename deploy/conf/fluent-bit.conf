[SERVICE]
	flush 1
	log_level ${LOG_LEVEL}
	http_server on

[INPUT]
	name forward

[FILTER]
	name rewrite_tag
	alias tag_level_critical_from_field
	match ${INPUT_TAG_PREFIX}*
	rule $log ^.*?(?:${LOG_LEVEL_FIELDS})(${LOG_LEVEL_CRITICAL_VALUES}).*$ log-level.critical false

[FILTER]
	name rewrite_tag
	alias tag_level_error_from_field
	match ${INPUT_TAG_PREFIX}*
	rule $log ^.*?(?:${LOG_LEVEL_FIELDS})(${LOG_LEVEL_ERROR_VALUES}).*$ log-level.error false

[FILTER]
	name rewrite_tag
	alias tag_level_warning_from_field
	match ${INPUT_TAG_PREFIX}*
	rule $log ^.*?(?:${LOG_LEVEL_FIELDS})(${LOG_LEVEL_WARNING_VALUES}).*$ log-level.warning false

[FILTER]
	name rewrite_tag
	alias tag_level_info_from_field
	match ${INPUT_TAG_PREFIX}*
	rule $log ^.*?(?:${LOG_LEVEL_FIELDS})(${LOG_LEVEL_INFO_VALUES}).*$ log-level.info false

[FILTER]
	name rewrite_tag
	alias tag_level_debug_from_field
	match ${INPUT_TAG_PREFIX}*
	rule $log ^.*?(?:${LOG_LEVEL_FIELDS})(${LOG_LEVEL_DEBUG_VALUES}).*$ log-level.debug false

[FILTER]
	name rewrite_tag
	alias tag_level_trace_from_field
	match ${INPUT_TAG_PREFIX}*
	rule $log ^.*?(?:${LOG_LEVEL_FIELDS})(${LOG_LEVEL_TRACE_VALUES}).*$ log-level.trace false

[FILTER]
	name rewrite_tag
	alias tag_level_critical_from_delimiter
	match ${INPUT_TAG_PREFIX}*
	rule $log ^(?:.*?(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}))?(${LOG_LEVEL_CRITICAL_VALUES})(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}).*$ log-level.critical false

[FILTER]
	name rewrite_tag
	alias tag_level_error_from_delimiter
	match ${INPUT_TAG_PREFIX}*
	rule $log ^(?:.*?(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}))?(${LOG_LEVEL_ERROR_VALUES})(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}).*$ log-level.error false

[FILTER]
	name rewrite_tag
	alias tag_level_warning_from_delimiter
	match ${INPUT_TAG_PREFIX}*
	rule $log ^(?:.*?(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}))?(${LOG_LEVEL_WARNING_VALUES})(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}).*$ log-level.warning false

[FILTER]
	name rewrite_tag
	alias tag_level_info_from_delimiter
	match ${INPUT_TAG_PREFIX}*
	rule $log ^(?:.*?(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}))?(${LOG_LEVEL_INFO_VALUES})(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}).*$ log-level.info false

[FILTER]
	name rewrite_tag
	alias tag_level_debug_from_delimiter
	match ${INPUT_TAG_PREFIX}*
	rule $log ^(?:.*?(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}))?(${LOG_LEVEL_DEBUG_VALUES})(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}).*$ log-level.debug false

[FILTER]
	name rewrite_tag
	alias tag_level_trace_from_delimiter
	match ${INPUT_TAG_PREFIX}*
	rule $log ^(?:.*?(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}))?(${LOG_LEVEL_TRACE_VALUES})(?:${LOG_LEVEL_DELIMITERS})(?:${LOG_LEVEL_DELIMITERS}).*$ log-level.trace false

[FILTER]
	name rewrite_tag
	alias tag_level_unknown
	match ${INPUT_TAG_PREFIX}*
	rule $log ^.*$ log-level. false

[FILTER]
	name rewrite_tag
	match log-level.*
	rule $container_name ^\/([^_]+)_([^.]+)\.([^.]+)\.?(.*)?$ docker-swarm.$1.$2.$3.$4.$TAG[1] false

[FILTER]
	name rewrite_tag
	match log-level.*
	rule $container_name ^\/(.*)$ docker-container.$1.$TAG[1] false

[OUTPUT]
	name loki
	match docker-swarm.*
	host ${LOKI_HOST}
	labels stack_name=$TAG[1], service_name=$TAG[1]_$TAG[2], slot=$TAG[3], container_name=$TAG[1]_$TAG[2].$TAG[3].$TAG[4], level=$TAG[5]
	label_keys $container_id
	remove_keys container_id, container_name, source
	drop_single_key on
	line_format key_value

[OUTPUT]
	name loki
	match docker-container.*
	host ${LOKI_HOST}
	labels stack_name=${EMPTY_LABEL_VALUE}, service_name=${EMPTY_LABEL_VALUE}, slot=${EMPTY_LABEL_VALUE}, container_name=$TAG[1], level=$TAG[2]
	label_keys $container_id
	remove_keys container_id, container_name, source
	drop_single_key on
	line_format key_value
